#!/bin/bash


# Call this script as `./build.sh <npm_version>`
set -euo pipefail

OUT_VERSION="${1:-}"
OUT_FOLDER="pkg"
OUT_JSON="${OUT_FOLDER}/package.json"
OUT_TARGET="bundler"
OUT_NPM_NAME="@prisma/query-engine-wasm"

# use `wasm-pack build --release` on CI only
if [[ -z "${BUILDKITE:-}" ]] && [[ -z "${GITHUB_ACTIONS:-}" ]]; then
    BUILD_PROFILE="--profiling"
else
    BUILD_PROFILE="--release"
fi

# Check if wasm-pack is installed
if ! command -v wasm-pack &> /dev/null
then
    echo "wasm-pack could not be found, installing now..."
    # Install wasm-pack
    curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
fi

wasm-pack build $BUILD_PROFILE --target $OUT_TARGET --out-name query_engine

WASM_OPT_ARGS=(
    "-Os"                                 # execute size-focused optimization passes
    "--vacuum"                            # removes obviously unneeded code
    "--duplicate-function-elimination"    # removes duplicate functions 
    "--duplicate-import-elimination"      # removes duplicate imports
    "--remove-unused-module-elements"     # removes unused module elements
    "--dae-optimizing"                    # removes arguments to calls in an lto-like manner
    "--remove-unused-names"               # removes names from location that are never branched to
    "--rse"                               # removes redundant local.sets
    "--gsi"                               # global struct inference, to optimize constant values
    "--gufa-optimizing"                   # optimize the entire program using type monomorphization
    "--strip-dwarf"                       # removes DWARF debug information
    "--strip-producers"                   # removes the "producers" section
    "--strip-target-features"             # removes the "target_features" section
)

if [[ "$BUILD_PROFILE" == "--release" ]]; then
    # In release mode, we want to strip the debug symbols.
    wasm-opt "${WASM_OPT_ARGS[@]}" \
        "--strip-debug" \
        "${OUT_FOLDER}/query_engine_bg.wasm" \
        -o "${OUT_FOLDER}/query_engine_bg.wasm"
elif [[ "$BUILD_PROFILE" == "--profiling" ]]; then
    # In profiling mode, we want to keep the debug symbols.
    wasm-opt "${WASM_OPT_ARGS[@]}" \
        "--debuginfo" \
        "${OUT_FOLDER}/query_engine_bg.wasm" \
        -o "${OUT_FOLDER}/query_engine_bg.wasm"
fi

sleep 1

# Mark the package as a ES module, set the entry point to the query_engine.js file, mark the package as public
printf '%s\n' "$(jq '. + {"type": "module"} + {"main": "./query_engine.js"} + {"private": false}' $OUT_JSON)" > $OUT_JSON

# Add the version
printf '%s\n' "$(jq --arg version "$OUT_VERSION" '. + {"version": $version}' $OUT_JSON)" > $OUT_JSON

# Add the package name
printf '%s\n' "$(jq --arg name "$OUT_NPM_NAME" '. + {"name": $name}' $OUT_JSON)" > $OUT_JSON

# Some info: enabling Cloudflare Workers in the bindings generated by wasm-package
# is useful for local experiments, but it's not needed here.
# `@prisma/client` has its own `esbuild` plugin for CF-compatible bindings
# and import of `.wasm` files.
enable_cf_in_bindings() {
    #Â Enable Cloudflare Workers in the generated JS bindings.
    # The generated bindings are compatible with:
    # - Node.js
    # - Cloudflare Workers / Miniflare

    local FILE="$1" # e.g., `query_engine.js`
    local BG_FILE="${FILE%.js}_bg.js"
    local OUTPUT_FILE="${OUT_FOLDER}/${FILE}"

    cat <<EOF > "$OUTPUT_FILE"
import * as imports from "./${BG_FILE}";

// switch between both syntax for Node.js and for workers (Cloudflare Workers)
import * as wkmod from "./${BG_FILE%.js}.wasm";
import * as nodemod from "./${BG_FILE%.js}.wasm";
if ((typeof process !== 'undefined') && (process.release.name === 'node')) {
    imports.__wbg_set_wasm(nodemod);
} else {
    const instance = new WebAssembly.Instance(wkmod.default, { "./${BG_FILE}": imports });
    imports.__wbg_set_wasm(instance.exports);
}

export * from "./${BG_FILE}";
EOF
}

enable_cf_in_bindings "query_engine.js"
